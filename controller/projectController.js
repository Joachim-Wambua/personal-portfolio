const path=require("path"),DatauriParser=require("datauri/parser"),Project=require("../dbSchemas/projectSchema"),parser=new DatauriParser;class ProjectController{async createProject(e,r){try{let{title:t,date:s,author:a,client:o,category:c,tech_stack:n,project_overview:d,project_objectives:j,key_features:u,url:i,imagesBackground:l,image1:P,image2:$,image3:p}=e.body,y=new Project({title:t,date:s,author:a,client:o,category:c,tech_stack:n,project_overview:d,project_objectives:j,key_features:u,url:i,images:{background:l,image1:P,image2:$,image3:p}});await y.save(),r.status(201).json({message:"Project Added Successfully"})}catch(h){console.error(h),r.status(500).json({error:"An error occurred while adding the project"})}}async readProjects(e,r){try{let t=await Project.find();r.status(200).json(t)}catch(s){console.error(s),r.status(500).json({message:"An error occurred while retrieving projects!"})}}async updateProject(e,r){try{let{id:t}=e.params,s=e.body,a=await Project.findByIdAndUpdate(t,s,{new:!0});if(!a)return r.status(404).json({message:"Project not found"});r.status(200).json({message:"Project updated successfully",updatedProject:a})}catch(o){console.error(o),r.status(500).json({error:"An error occurred while updating the project"})}}async getProjectById(e,r){try{let{id:t}=e.params,s=await Project.findById(t);if(!s)return r.status(404).json({message:"Project not found"});r.render("project-detail",{project:s})}catch(a){r.status(500).json({message:"An error occurred while retrieving the project!"})}}async deleteProject(e,r){try{let{id:t}=e.params,s=await Project.findByIdAndDelete(t);if(!s)return r.status(404).json({message:"Project not found"});r.status(200).json({message:"Project deleted successfully"})}catch(a){console.error(a),r.status(500).json({message:"An error occurred while deleting the project"})}}}module.exports=new ProjectController;