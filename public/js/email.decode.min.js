(function () {
  "use strict";

  function logError(message) {
    (console.error ? console.error : console.log).call(console, message);
  }

  function decodeEmail(encodedEmail) {
    return (
      (decodeContainer.innerHTML =
        '<a href="' + encodedEmail.replace(/"/g, "&quot;") + '"></a>'),
      decodeContainer.childNodes[0].getAttribute("href")
    );
  }

  function hexToDecimal(hex) {
    return hex ? parseInt(hex, 16) : 0;
  }

  function decryptEmail(encodedEmail, startIndex) {
    var decryptedEmail = "";
    var xorKey = hexToDecimal(encodedEmail.substr(startIndex, 2));

    for (var i = startIndex + 2; i < encodedEmail.length; i += 2) {
      var decryptedChar = hexToDecimal(encodedEmail.substr(i, 2)) ^ xorKey;
      decryptedEmail += String.fromCharCode(decryptedChar);
    }

    return decodeEmail(decryptedEmail);
  }

  var emailProtectionMarker = "/cdn-cgi/l/email-protection#";
  var emailClassSelector = ".__cf_email";
  var emailDataAttribute = "data-cfemail";
  var decodeContainer = document.createElement("div");

  // Decrypt email addresses in anchor tags
  (function () {
    var anchorTags = document.getElementsByTagName("a");
    for (var i = 0; i < anchorTags.length; i++) {
      try {
        var anchor = anchorTags[i];
        var markerIndex = anchor.href.indexOf(emailProtectionMarker);
        if (markerIndex > -1) {
          anchor.href =
            "mailto:" +
            decryptEmail(
              anchor.href,
              markerIndex + emailProtectionMarker.length
            );
        }
      } catch (error) {
        logError(error);
      }
    }
  })();

  // Decrypt email addresses in elements with the specified class
  (function () {
    var emailElements = document.querySelectorAll(emailClassSelector);
    for (var i = 0; i < emailElements.length; i++) {
      try {
        var emailElement = emailElements[i];
        var decryptedEmail = decryptEmail(
          emailElement.getAttribute(emailDataAttribute),
          0
        );
        var textNode = document.createTextNode(decryptedEmail);
        emailElement.parentNode.replaceChild(textNode, emailElement);
      } catch (error) {
        logError(error);
      }
    }
  })();
})();
